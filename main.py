import os
import requests
import asyncio
import logging
import collections
import copy
import random
import datetime
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- C·∫•u h√¨nh bot ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8137068939:AAG19xO92yXsz_d9vz_m2aJW2Wh8JZnvSPQ")
EXTERNAL_API_URL = "https://apib52.up.railway.app/api/taixiumd5"

ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "6915752059")) # VD: 123456789

# Tr·∫°ng th√°i bot
bot_running = False
prediction_task = None
current_game_name = " ôùüßùü§"

# --- M·∫´u d·ªØ li·ªáu ban ƒë·∫ßu v√† tr·∫°ng th√°i to√†n c·ª•c cho logic d·ª± ƒëo√°n ---
initial_api_data_template = {
    "Phien_moi": None,
    "pattern_length": 8,
    "pattern": "xxxxxxxx",
    "matches": ["x"],
    "pattern_tai": 0,
    "pattern_xiu": 0,
    "pattern_percent_tai": 0,
    "pattern_percent_xiu": 0,
    "phan_tram_tai": 50,
    "phan_tram_xiu": 50,
    "tong_tai": 0.0,
    "tong_xiu": 0.0,
    "du_doan": "Kh√¥ng c√≥",
    "ly_do": "Ch∆∞a c√≥ d·ªØ li·ªáu d·ª± ƒëo√°n.",
    "phien_du_doan": None,
    "admin_info": "@heheviptool"
}

# L·ªãch s·ª≠ c√°c k·∫øt qu·∫£ th·ª±c t·∫ø (t='T√†i', x='X·ªâu')
history_results = collections.deque(maxlen=100)

# L∆∞u tr·ªØ tr·∫°ng th√°i d·ª± ƒëo√°n g·∫ßn nh·∫•t ƒë·ªÉ ki·ªÉm tra 'consecutive_losses'
last_prediction_info = {
    "predicted_expect": None,
    "predicted_result": None,
    "consecutive_losses": 0,
    "last_actual_result": None
}

# Bi·∫øn ƒë·ªÉ theo d√µi phi√™n cu·ªëi c√πng ƒë√£ x·ª≠ l√Ω t·ª´ API ngo√†i ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
last_processed_phien = None

# --- Th·ªëng k√™ d·ª± ƒëo√°n ---
prediction_stats = {
    "total_predictions": 0,
    "correct_predictions": 0,
    "last_checked_phien": None # Phi√™n cu·ªëi c√πng ƒë∆∞·ª£c ki·ªÉm tra khi t√≠nh ƒë√∫ng/sai
}

# --- Qu·∫£n l√Ω Key ---
# ƒê·ªÉ ƒë∆°n gi·∫£n, key ƒë∆∞·ª£c l∆∞u trong b·ªô nh·ªõ. Trong th·ª±c t·∫ø, b·∫°n N√äN d√πng database.
active_keys = {} # key: { 'expiry_time': datetime_object, 'user_id': user_id, 'is_active': True }
users_with_active_subscriptions = {} # user_id: key

KEY_FILE = "keys.json" # File ƒë·ªÉ l∆∞u tr·ªØ keys (ƒë∆°n gi·∫£n, kh√¥ng ph·∫£i database th·ª±c s·ª±)

def load_keys():
    global active_keys, users_with_active_subscriptions
    if os.path.exists(KEY_FILE):
        try:
            with open(KEY_FILE, 'r') as f:
                data = json.load(f)
                active_keys_loaded = {}
                users_with_active_subscriptions_loaded = {}
                for key, details in data['active_keys'].items():
                    # Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√†nh datetime object
                    if details['expiry_time'] != 'forever':
                        details['expiry_time'] = datetime.datetime.fromisoformat(details['expiry_time'])
                    active_keys_loaded[key] = details
                users_with_active_subscriptions_loaded = {int(uid): k for uid, k in data['users_with_active_subscriptions'].items()}
                
                active_keys = active_keys_loaded
                users_with_active_subscriptions = users_with_active_subscriptions_loaded
                logger.info("Keys loaded successfully.")
        except Exception as e:
            logger.error(f"Error loading keys: {e}")
    else:
        logger.info("No keys file found. Starting with empty keys.")

def save_keys():
    try:
        with open(KEY_FILE, 'w') as f:
            data_to_save = {
                'active_keys': {},
                'users_with_active_subscriptions': {str(uid): k for uid, k in users_with_active_subscriptions.items()}
            }
            for key, details in active_keys.items():
                details_copy = details.copy()
                if details_copy['expiry_time'] != 'forever':
                    details_copy['expiry_time'] = details_copy['expiry_time'].isoformat()
                data_to_save['active_keys'][key] = details_copy
            json.dump(data_to_save, f, indent=4)
            logger.info("Keys saved successfully.")
    except Exception as e:
        logger.error(f"Error saving keys: {e}")

def generate_key(length=16):
    """T·∫°o m·ªôt chu·ªói key ng·∫´u nhi√™n."""
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    return ''.join(random.choice(chars) for _ in range(length))

def get_expiry_time(duration_type, value):
    """T√≠nh to√°n th·ªùi gian h·∫øt h·∫°n c·ªßa key."""
    current_time = datetime.datetime.now()
    if duration_type == 'phut':
        return current_time + datetime.timedelta(minutes=value)
    elif duration_type == 'gio':
        return current_time + datetime.timedelta(hours=value)
    elif duration_type == 'ngay':
        return current_time + datetime.timedelta(days=value)
    elif duration_type == 'tuan':
        return current_time + datetime.timedelta(weeks=value)
    elif duration_type == 'thang':
        # ƒê·ªÉ ƒë∆°n gi·∫£n, 1 th√°ng = 30 ng√†y. Trong th·ª±c t·∫ø c·∫ßn x·ª≠ l√Ω ch√≠nh x√°c h∆°n.
        return current_time + datetime.timedelta(days=value * 30)
    elif duration_type == 'vinhvien':
        return 'forever'
    return None

def is_key_valid(key):
    """Ki·ªÉm tra xem key c√≥ t·ªìn t·∫°i v√† c√≤n h·∫°n kh√¥ng."""
    if key not in active_keys:
        return False
    key_details = active_keys[key]
    if not key_details['is_active']:
        return False
    if key_details['expiry_time'] == 'forever':
        return True
    return datetime.datetime.now() < key_details['expiry_time']

def is_user_subscribed(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëƒÉng k√Ω ho·∫°t ƒë·ªông kh√¥ng."""
    if user_id not in users_with_active_subscriptions:
        return False
    key = users_with_active_subscriptions[user_id]
    return is_key_valid(key)


# --- H√†m h·ªó tr·ª£ logic d·ª± ƒëo√°n (tr√≠ch t·ª´ app.py) ---
def calculate_tai_xiu(xuc_xac_1, xuc_xac_2, xuc_xac_3):
    total_sum = xuc_xac_1 + xuc_xac_2 + xuc_xac_3
    if total_sum >= 4 and total_sum <= 10: return "X·ªâu", total_sum
    elif total_sum >= 11 and total_sum <= 17: return "T√†i", total_sum
    else: # 3 or 18
        if total_sum == 3: return "X·ªâu", total_sum
        if total_sum == 18: return "T√†i", total_sum
        return "Kh√¥ng x√°c ƒë·ªãnh", total_sum

def get_next_phien_code(current_phien_int):
    if isinstance(current_phien_int, int): return current_phien_int + 1
    return None

def update_history_and_state(new_session_data):
    global history_results, initial_api_data_template, last_prediction_info, last_processed_phien, prediction_stats

    current_phien = new_session_data['Phien']
    current_ket_qua = new_session_data['Ket_qua']
    xuc_xac_1 = new_session_data['Xuc_xac_1']
    xuc_xac_2 = new_session_data['Xuc_xac_2']
    xuc_xac_3 = new_session_data['Xuc_xac_3']
    tong_xuc_xac = new_session_data['Tong']

    actual_result_char = "t" if "T√†i" in current_ket_qua else "x"

    if current_phien != last_processed_phien:
        history_results.append({
            "Phien": current_phien,
            "Tong": tong_xuc_xac,
            "Xuc_xac_1": xuc_xac_1,
            "Xuc_xac_2": xuc_xac_2,
            "Xuc_xac_3": xuc_xac_3,
            "Result": actual_result_char,
            "Ket_qua": current_ket_qua
        })
        logger.info(f"Added new session to history: Phien {current_phien} - Result: {current_ket_qua}")
        last_processed_phien = current_phien

        # Update prediction stats (after history is updated and before new prediction is made)
        if last_prediction_info["predicted_expect"] is not None and \
           last_prediction_info["predicted_expect"] == current_phien and \
           last_prediction_info["predicted_result"] is not None:
            
            predicted_res = last_prediction_info["predicted_result"]
            
            # Ch·ªâ tƒÉng total_predictions khi c√≥ m·ªôt d·ª± ƒëo√°n cho phi√™n n√†y
            if prediction_stats["last_checked_phien"] != current_phien:
                prediction_stats["total_predictions"] += 1
                prediction_stats["last_checked_phien"] = current_phien

            if predicted_res.lower() != actual_result_char:
                last_prediction_info["consecutive_losses"] += 1
                logger.info(f"Prediction '{predicted_res}' for session Phien {current_phien} MISSED. Consecutive losses: {last_prediction_info['consecutive_losses']}")
            else:
                last_prediction_info["consecutive_losses"] = 0
                prediction_stats["correct_predictions"] += 1
                logger.info(f"Prediction '{predicted_res}' for session Phien {current_phien} CORRECT. Resetting losses.")
        else:
            last_prediction_info["consecutive_losses"] = 0
            logger.info("No matching previous prediction to evaluate or app restarted. Resetting losses.")
        
        last_prediction_info["last_actual_result"] = actual_result_char

    initial_api_data_template["Phien_moi"] = current_phien
    next_phien = get_next_phien_code(current_phien)
    initial_api_data_template["phien_du_doan"] = next_phien if next_phien else "Kh√¥ng x√°c ƒë·ªãnh"

    current_pattern_chars = "".join([entry['Result'] for entry in history_results])
    initial_api_data_template['pattern'] = current_pattern_chars[-initial_api_data_template['pattern_length']:]
    
    tai_count = initial_api_data_template['pattern'].count('t')
    xiu_count = initial_api_data_template['pattern'].count('x')
    
    initial_api_data_template['pattern_tai'] = tai_count
    initial_api_data_template['pattern_xiu'] = xiu_count

    total_pattern_chars = len(initial_api_data_template['pattern'])
    if total_pattern_chars > 0:
        initial_api_data_template['pattern_percent_tai'] = round((tai_count / total_pattern_chars) * 100, 2)
        initial_api_data_template['pattern_percent_xiu'] = round((xiu_count / total_pattern_chars) * 100, 2)
    else:
        initial_api_data_template['pattern_percent_tai'] = 0
        initial_api_data_template['pattern_percent_xiu'] = 0

    if history_results:
        initial_api_data_template['matches'] = [history_results[-1]['Result']]
    else:
        initial_api_data_template['matches'] = []

    initial_api_data_template['phan_tram_tai'] = initial_api_data_template['pattern_percent_tai']
    initial_api_data_template['phan_tram_xiu'] = initial_api_data_template['pattern_percent_xiu']
    
    initial_api_data_template['tong_tai'] = round(initial_api_data_template['phan_tram_tai'] * 1000 / 100, 2)
    initial_api_data_template['tong_xiu'] = round(initial_api_data_template['phan_tram_xiu'] * 1000 / 100, 2)

def analyze_streaks(history_deque):
    if not history_deque: return 0, None
    current_streak_length = 0
    current_streak_type = None
    for i in range(len(history_deque) - 1, -1, -1):
        result = history_deque[i]['Result']
        if current_streak_type is None:
            current_streak_type = result
            current_streak_length = 1
        elif result == current_streak_type:
            current_streak_length += 1
        else: break
    return current_streak_length, current_streak_type

def calculate_conditional_probability(history_deque, lookback_length=3):
    if len(history_deque) < lookback_length + 1: return {}
    probabilities = {}
    results_chars = "".join([entry['Result'] for entry in history_deque])
    for i in range(len(results_chars) - lookback_length):
        prefix = results_chars[i : i + lookback_length]
        next_char = results_chars[i + lookback_length]
        if prefix not in probabilities:
            probabilities[prefix] = {'t': 0, 'x': 0, 'total': 0}
        probabilities[prefix][next_char] += 1
        probabilities[prefix]['total'] += 1
    final_probs = {}
    for prefix, counts in probabilities.items():
        if counts['total'] > 0:
            final_probs[prefix] = {
                't': counts['t'] / counts['total'],
                'x': counts['x'] / counts['total']
            }
        else: final_probs[prefix] = {'t': 0, 'x': 0}
    return final_probs

def perform_prediction_logic():
    global initial_api_data_template, last_prediction_info, history_results

    du_doan_ket_qua = ""
    ly_do_du_doan = ""

    min_streak_for_prediction = 3
    break_streak_threshold = 5
    current_streak_length, current_streak_type = analyze_streaks(history_results)

    if current_streak_type:
        if current_streak_length >= min_streak_for_prediction:
            if current_streak_length < break_streak_threshold:
                du_doan_ket_qua = "T√†i" if current_streak_type == 't' else "X·ªâu"
                ly_do_du_doan = f"Theo c·∫ßu {'T√†i' if current_streak_type == 't' else 'X·ªâu'} d√†i ({current_streak_length} l·∫ßn)."
            else:
                du_doan_ket_qua = "X·ªâu" if current_streak_type == 't' else "T√†i"
                ly_do_du_doan = f"B·∫ª c·∫ßu {'T√†i' if current_streak_type == 't' else 'X·ªâu'} d√†i ({current_streak_length} l·∫ßn) c√≥ kh·∫£ nƒÉng ƒë·∫£o chi·ªÅu."
        else: ly_do_du_doan = "Kh√¥ng c√≥ c·∫ßu r√µ r√†ng."
    else: ly_do_du_doan = "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch c·∫ßu."

    lookback_prob = 3
    if len(history_results) >= lookback_prob:
        recent_prefix_chars = "".join([entry['Result'] for entry in history_results])[-lookback_prob:]
        conditional_probs = calculate_conditional_probability(history_results, lookback_prob)
        if recent_prefix_chars in conditional_probs:
            prob_t = conditional_probs[recent_prefix_chars]['t']
            prob_x = conditional_probs[recent_prefix_chars]['x']
            prob_threshold_strong = 0.6
            if prob_t > prob_x and prob_t >= prob_threshold_strong:
                if not du_doan_ket_qua or (du_doan_ket_qua == "X·ªâu" and prob_t > prob_x * 1.2):
                    du_doan_ket_qua = "T√†i"
                    ly_do_du_doan = f"X√°c su·∫•t T√†i cao ({round(prob_t*100, 2)}%) sau {recent_prefix_chars}."
            elif prob_x > prob_t and prob_x >= prob_threshold_strong:
                if not du_doan_ket_qua or (du_doan_ket_qua == "T√†i" and prob_x > prob_t * 1.2):
                    du_doan_ket_qua = "X·ªâu"
                    ly_do_du_doan = f"X√°c su·∫•t X·ªâu cao ({round(prob_x*100, 2)}%) sau {recent_prefix_chars}."
        
    reverse_threshold = 3
    if last_prediction_info["consecutive_losses"] >= reverse_threshold:
        if du_doan_ket_qua == "T√†i": du_doan_ket_qua = "X·ªâu"
        elif du_doan_ket_qua == "X·ªâu": du_doan_ket_qua = "T√†i"
        else:
            if last_prediction_info["last_actual_result"] == 't': du_doan_ket_qua = "X·ªâu"
            else: du_doan_ket_qua = "T√†i"
        ly_do_du_doan += f" | ƒêang tr·∫≠t {last_prediction_info['consecutive_losses']} l·∫ßn ‚Üí Auto ƒë·∫£o ng∆∞·ª£c."
    
    if not du_doan_ket_qua or du_doan_ket_qua == "Kh√¥ng c√≥":
        if initial_api_data_template['pattern_percent_tai'] > initial_api_data_template['pattern_percent_xiu']:
            du_doan_ket_qua = "T√†i"
            ly_do_du_doan = "M·∫∑c ƒë·ªãnh: Theo t·ª∑ l·ªá pattern T√†i l·ªõn h∆°n (kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh kh√°c)."
        elif initial_api_data_template['pattern_percent_xiu'] > initial_api_data_template['pattern_percent_tai']:
            du_doan_ket_qua = "X·ªâu"
            ly_do_du_doan = "M·∫∑c ƒë·ªãnh: Theo t·ª∑ l·ªá pattern X·ªâu l·ªõn h∆°n (kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh kh√°c)."
        else:
            du_doan_ket_qua = random.choice(["T√†i", "X·ªâu"])
            ly_do_du_doan = "M·∫∑c ƒë·ªãnh: C√°c t√≠n hi·ªáu c√¢n b·∫±ng, d·ª± ƒëo√°n ng·∫´u nhi√™n."

    initial_api_data_template['du_doan'] = du_doan_ket_qua
    initial_api_data_template['ly_do'] = ly_do_du_doan

    last_prediction_info["predicted_expect"] = initial_api_data_template["phien_du_doan"]
    last_prediction_info["predicted_result"] = du_doan_ket_qua
    
    return copy.deepcopy(initial_api_data_template)


# --- H√†m h·ªó tr·ª£ bot ---
async def fetch_and_process_prediction_data():
    global last_processed_phien
    try:
        response = requests.get(EXTERNAL_API_URL, timeout=10)
        response.raise_for_status()
        external_data = response.json()
        logger.info(f"Fetched raw data: {external_data}")

        if all(k in external_data for k in ['Ket_qua', 'Phien', 'Tong', 'Xuc_xac_1', 'Xuc_xac_2', 'Xuc_xac_3']):
            if external_data['Phien'] != last_processed_phien:
                update_history_and_state(external_data)
                prediction_data = perform_prediction_logic()
                return prediction_data
            else:
                logger.info(f"Session {external_data['Phien']} already processed. Waiting for new session.")
                return None
        else:
            logger.error(f"Invalid data structure from external API. Missing expected keys. Raw response: {external_data}")
            return None
    except Exception as e:
        logger.error(f"Error fetching or processing prediction data: {e}")
        return None

def format_prediction_message(prediction_data, game_name):
    if not prediction_data:
        return "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu d·ª± ƒëo√°n. Vui l√≤ng th·ª≠ l·∫°i sau."

    phien_moi = prediction_data.get('Phien_moi', 'N/A')
    
    current_session_info = next((item for item in history_results if item['Phien'] == phien_moi), None)
    
    ket_qua = current_session_info.get('Ket_qua', 'N/A') if current_session_info else 'N/A'
    tong_xuc_xac = current_session_info.get('Tong', 'N/A') if current_session_info else 'N/A'
    xuc_xac_1 = current_session_info.get('Xuc_xac_1', 'N/A') if current_session_info else 'N/A'
    xuc_xac_2 = current_session_info.get('Xuc_xac_2', 'N/A') if current_session_info else 'N/A'
    xuc_xac_3 = current_session_info.get('Xuc_xac_3', 'N/A') if current_session_info else 'N/A'

    pattern = prediction_data.get('pattern', 'xxxxxxxx')
    phien_du_doan = prediction_data.get('phien_du_doan', 'N/A')
    du_doan = prediction_data.get('du_doan', 'Kh√¥ng c√≥')

    display_pattern = pattern.replace('t', 'T').replace('x', 'X')

    xuc_xac_info = f" ({xuc_xac_1},{xuc_xac_2},{xuc_xac_3})" if xuc_xac_1 != 'N/A' else ''

    # H√†m chuy·ªÉn ƒë·ªïi s·ªë sang d·∫°ng Unicode Fullwidth
    def convert_to_fullwidth_digits(num):
        return "".join(chr(ord(digit) + 0xFEE0) for digit in str(num))

    message = (
        f"ü§ñ {game_name}\n"
        f"üéØ ·¥ò ú…™·¥áÃÇ…¥ {convert_to_fullwidth_digits(phien_moi)}\n"
        f"üé≤ ·¥ã·¥áÃÇÃÅ·¥õ «´·¥úÃâ·¥Ä : {ket_qua} {convert_to_fullwidth_digits(tong_xuc_xac)}{xuc_xac_info}\n"
        f"üß© ·¥ò·¥Ä·¥õ·¥õ·¥á Ä…¥ : {display_pattern}\n"
        f"üéÆ  ·¥ò ú…™·¥áÃÇ…¥ {convert_to_fullwidth_digits(phien_du_doan)} : {du_doan} (·¥ç·¥è·¥Ö·¥á ü  ô·¥ÄÍú±…™·¥Ñ)"
    )
    return message

# --- C√°c l·ªánh c·ªßa bot ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    response_message = (
        f"üåü CH√ÄO M·ª™NG {user_name} üåü\n"
        f"üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi HeHe Bot üéâ\n"
        f"üì¶ G√≥i hi·ªán t·∫°i: {'ƒê√£ k√≠ch ho·∫°t' if is_user_subscribed(update.effective_user.id) else 'Ch∆∞a k√≠ch ho·∫°t'}\n"
        f"‚è∞ H·∫øt h·∫°n: {'Vƒ©nh vi·ªÖn' if (update.effective_user.id in users_with_active_subscriptions and active_keys[users_with_active_subscriptions[update.effective_user.id]]['expiry_time'] == 'forever') else (active_keys[users_with_active_subscriptions[update.effective_user.id]]['expiry_time'].strftime('%H:%M %d/%m/%Y') if update.effective_user.id in users_with_active_subscriptions else 'Ch∆∞a k√≠ch ho·∫°t')}\n"
        f"üí° D√πng /help ƒë·ªÉ xem c√°c l·ªánh"
    )
    await update.message.reply_text(response_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    response_message = (
        f"üì¶ G√≥i hi·ªán t·∫°i: {'ƒê√£ k√≠ch ho·∫°t' if is_user_subscribed(update.effective_user.id) else 'Ch∆∞a k√≠ch ho·∫°t'}\n"
        f"üî• C√°c l·ªánh h·ªó tr·ª£:\n"
        f"‚úÖ /start - ƒêƒÉng k√Ω v√† b·∫Øt ƒë·∫ßu\n"
        f"üîë /key [m√£] - K√≠ch ho·∫°t g√≥i\n"
        f"üéÆ /chaymodelbasic - Ch·∫°y d·ª± ƒëo√°n  (LUCK)\n"
        f"üõë /stop - D·ª´ng d·ª± ƒëo√°n\n"
        f"üõ†Ô∏è /admin - L·ªánh d√†nh cho admin\n"
        f"üìä /check - Xem th·ªëng k√™ d·ª± ƒëo√°n\n"
        f"üì¨ Li√™n h·ªá:\n"
        f"üë§ Admin: t.me/heheviptool"
    )
    await update.message.reply_text(response_message)

async def key_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p m√£ key. V√≠ d·ª•: /key ABCXYZ123456")
        return
    
    user_id = update.effective_user.id
    provided_key = context.args[0]

    if provided_key not in active_keys:
        await update.message.reply_text("M√£ key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
        return
    
    key_details = active_keys[provided_key]

    if not key_details['is_active']:
        await update.message.reply_text("M√£ key n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a.")
        return
    
    if key_details['user_id'] is not None and key_details['user_id'] != user_id:
        await update.message.reply_text("M√£ key n√†y ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi ng∆∞·ªùi d√πng kh√°c.")
        return
    
    if is_key_valid(provided_key):
        # N·∫øu key ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi ng∆∞·ªùi d√πng n√†y v√† c√≤n h·∫°n
        if key_details['user_id'] == user_id:
            expiry_str = "Vƒ©nh vi·ªÖn" if key_details['expiry_time'] == 'forever' else key_details['expiry_time'].strftime('%H:%M %d/%m/%Y')
            await update.message.reply_text(f"G√≥i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v·ªõi key n√†y v√† c√≤n h·∫°n ƒë·∫øn: {expiry_str}.")
        else: # K√≠ch ho·∫°t key m·ªõi cho ng∆∞·ªùi d√πng
            active_keys[provided_key]['user_id'] = user_id
            active_keys[provided_key]['is_active'] = False # V√¥ hi·ªáu h√≥a key sau khi d√πng (c√≥ th·ªÉ thay ƒë·ªïi logic n√†y)
            users_with_active_subscriptions[user_id] = provided_key
            save_keys()
            expiry_str = "Vƒ©nh vi·ªÖn" if key_details['expiry_time'] == 'forever' else key_details['expiry_time'].strftime('%H:%M %d/%m/%Y')
            await update.message.reply_text(f"Ch√∫c m·ª´ng! G√≥i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng ƒë·∫øn: {expiry_str}.")
    else:
        await update.message.reply_text("M√£ key ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")


async def chaymodelbasic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global bot_running, prediction_task
    user_id = update.effective_user.id

    if not is_user_subscribed(user_id):
        await update.message.reply_text("B·∫°n c·∫ßn k√≠ch ho·∫°t g√≥i ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y. Vui l√≤ng d√πng /key [m√£] ƒë·ªÉ k√≠ch ho·∫°t.")
        return

    if bot_running:
        await update.message.reply_text("Bot d·ª± ƒëo√°n ƒë√£ v√† ƒëang ch·∫°y r·ªìi. D√πng /stop ƒë·ªÉ d·ª´ng tr∆∞·ªõc khi ch·∫°y l·∫°i.")
        return

    bot_running = True
    await update.message.reply_text("Bot d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông. Bot s·∫Ω g·ª≠i d·ª± ƒëo√°n li√™n t·ª•c.")
    logger.info(f"Bot started by user {user_id}")

    async def send_predictions_loop():
        nonlocal update
        while bot_running:
            prediction_data = await fetch_and_process_prediction_data()
            if prediction_data:
                message_text = format_prediction_message(prediction_data, current_game_name)
                try:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, parse_mode='HTML')
                    logger.info(f"Sent prediction for session {prediction_data.get('Phien_moi')}")
                except Exception as e:
                    logger.error(f"Error sending message to chat {update.effective_chat.id}: {e}")
            await asyncio.sleep(20)

    prediction_task = asyncio.create_task(send_predictions_loop())


async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global bot_running, prediction_task
    if not bot_running:
        await update.message.reply_text("Bot d·ª± ƒëo√°n hi·ªán kh√¥ng ch·∫°y.")
        return

    bot_running = False
    if prediction_task:
        prediction_task.cancel()
        prediction_task = None
    await update.message.reply_text("Bot d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c d·ª´ng.")
    logger.info(f"Bot stopped by user {update.effective_user.id}")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_TELEGRAM_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        logger.warning(f"Unauthorized admin access attempt by user {update.effective_user.id}")
        return
    
    response_message = (
        "Ch√†o m·ª´ng Admin! C√°c l·ªánh admin:\n"
        "  /admin setgamename [t√™n_game_m·ªõi] - ƒê·ªïi t√™n game hi·ªÉn th·ªã\n"
        "  /admin getstatus - Xem tr·∫°ng th√°i bot v√† API\n"
        "  /admin createkey [s·ªë_l∆∞·ª£ng] [th·ªùi_gian] [lo·∫°i: phut|gio|ngay|tuan|thang|vinhvien] - T·∫°o key m·ªõi\n"
        "     VD: /admin createkey 1 30 phut (t·∫°o 1 key h·∫°n 30 ph√∫t)\n"
        "     VD: /admin createkey 5 1 ngay (t·∫°o 5 key h·∫°n 1 ng√†y)\n"
        "     VD: /admin createkey 1 1 vinhvien (t·∫°o 1 key vƒ©nh vi·ªÖn)\n"
        "  /admin listkeys - Li·ªát k√™ c√°c key ƒëang ho·∫°t ƒë·ªông/ch∆∞a d√πng\n"
        "  /admin revoke_key [m√£_key] - Thu h·ªìi/v√¥ hi·ªáu h√≥a m·ªôt key\n"
        "  /admin reset_stats - ƒê·∫∑t l·∫°i th·ªëng k√™ d·ª± ƒëo√°n"
    )
    await update.message.reply_text(response_message)

async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_TELEGRAM_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not context.args:
        await admin_command(update, context) # Show admin help if no arguments
        return

    sub_command = context.args[0].lower()
    args = context.args[1:]

    if sub_command == "setgamename":
        await setgamename_command_admin(update, context, args)
    elif sub_command == "getstatus":
        await get_status_command(update, context)
    elif sub_command == "createkey":
        await createkey_command(update, context, args)
    elif sub_command == "listkeys":
        await listkeys_command(update, context)
    elif sub_command == "revoke_key":
        await revoke_key_command(update, context, args)
    elif sub_command == "reset_stats":
        await reset_stats_command(update, context)
    else:
        await update.message.reply_text("L·ªánh admin kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng `/admin` ƒë·ªÉ xem c√°c l·ªánh.")

async def setgamename_command_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, args: list) -> None:
    global current_game_name
    if not args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p t√™n game m·ªõi. V√≠ d·ª•: `/admin setgamename SunWin`")
        return
    
    new_game_name = " ".join(args)
    def convert_to_fancy(text):
        fancy_chars_map = {
            'A': '·¥Ä', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': '·¥á', 'F': 'Íú∞', 'G': '…¢', 'H': ' ú', 'I': '…™', 
            'J': '·¥ä', 'K': '·¥ã', 'L': ' ü', 'M': '·¥ç', 'N': '…¥', 'O': '·¥è', 'P': '·¥ò', 'Q': 'Q', 'R': ' Ä', 
            'S': 'Íú±', 'T': '·¥õ', 'U': '·¥ú', 'V': '·¥†', 'W': '·¥°', 'X': 'x', 'Y': ' è', 'Z': '·¥¢',
            'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': 'Íú∞', 'g': '…¢', 'h': ' ú', 'i': '…™', 
            'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': 'Q', 'r': ' Ä', 
            's': 'Íú±', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è', 'z': '·¥¢',
            ' ': ' '
        }
        converted_text = "".join(fancy_chars_map.get(char.upper(), char) for char in text)
        return converted_text

    current_game_name = convert_to_fancy(new_game_name)
    await update.message.reply_text(f"T√™n game ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh: {current_game_name}")
    logger.info(f"Game name set to: {current_game_name} by admin {update.effective_user.id}")

async def createkey_command(update: Update, context: ContextTypes.DEFAULT_TYPE, args: list) -> None:
    if len(args) != 3:
        await update.message.reply_text("C√∫ ph√°p kh√¥ng ƒë√∫ng. D√πng: `/admin createkey [s·ªë_l∆∞·ª£ng] [th·ªùi_gian] [lo·∫°i]`")
        return
    
    try:
        num_keys = int(args[0])
        duration_value = int(args[1])
        duration_type = args[2].lower()

        if num_keys <= 0 or duration_value <= 0 and duration_type != 'vinhvien':
            await update.message.reply_text("S·ªë l∆∞·ª£ng key ho·∫∑c gi√° tr·ªã th·ªùi gian ph·∫£i l·ªõn h∆°n 0.")
            return

        if duration_type not in ['phut', 'gio', 'ngay', 'tuan', 'thang', 'vinhvien']:
            await update.message.reply_text("Lo·∫°i th·ªùi gian kh√¥ng h·ª£p l·ªá. Ch·ªçn: `phut, gio, ngay, tuan, thang, vinhvien`.")
            return

        generated_keys = []
        for _ in range(num_keys):
            new_key = generate_key()
            expiry = get_expiry_time(duration_type, duration_value)
            active_keys[new_key] = {
                'expiry_time': expiry,
                'user_id': None, # Null until activated
                'is_active': True # Key is ready to be used
            }
            generated_keys.append(new_key)
        
        save_keys()

        response = f"ƒê√£ t·∫°o {num_keys} key m·ªõi:\n"
        for key in generated_keys:
            expiry_str = "Vƒ©nh vi·ªÖn" if active_keys[key]['expiry_time'] == 'forever' else active_keys[key]['expiry_time'].strftime('%H:%M %d/%m/%Y')
            response += f"`{key}` (H·∫°n: {expiry_str})\n"
        await update.message.reply_text(response, parse_mode='MarkdownV2')
        logger.info(f"Generated {num_keys} keys by admin {update.effective_user.id}")

    except ValueError:
        await update.message.reply_text("S·ªë l∆∞·ª£ng ho·∫∑c th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë nguy√™n.")
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra khi t·∫°o key: {e}")
        logger.error(f"Error creating key: {e}")

async def listkeys_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    key_list_message = "Danh s√°ch Keys:\n\n"
    if not active_keys:
        key_list_message += "Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c t·∫°o."
    else:
        for key, details in active_keys.items():
            status = "ƒêang ho·∫°t ƒë·ªông" if is_key_valid(key) else "H·∫øt h·∫°n/ƒê√£ d√πng"
            expiry_str = "Vƒ©nh vi·ªÖn" if details['expiry_time'] == 'forever' else details['expiry_time'].strftime('%H:%M %d/%m/%Y')
            user_info = f" (S·ª≠ d·ª•ng b·ªüi User ID: {details['user_id']})" if details['user_id'] else ""
            key_list_message += f"`{key}` - H·∫°n: {expiry_str} - Tr·∫°ng th√°i: {status}{user_info}\n"
    await update.message.reply_text(key_list_message, parse_mode='MarkdownV2')

async def revoke_key_command(update: Update, context: ContextTypes.DEFAULT_TYPE, args: list) -> None:
    if len(args) != 1:
        await update.message.reply_text("C√∫ ph√°p kh√¥ng ƒë√∫ng. D√πng: `/admin revoke_key [m√£_key]`")
        return
    
    key_to_revoke = args[0]
    if key_to_revoke not in active_keys:
        await update.message.reply_text("M√£ key kh√¥ng t·ªìn t·∫°i.")
        return
    
    active_keys[key_to_revoke]['is_active'] = False
    if active_keys[key_to_revoke]['user_id'] in users_with_active_subscriptions:
        del users_with_active_subscriptions[active_keys[key_to_revoke]['user_id']]
    save_keys()
    await update.message.reply_text(f"Key `{key_to_revoke}` ƒë√£ ƒë∆∞·ª£c thu h·ªìi/v√¥ hi·ªáu h√≥a.")
    logger.info(f"Key {key_to_revoke} revoked by admin {update.effective_user.id}")

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    total = prediction_stats["total_predictions"]
    correct = prediction_stats["correct_predictions"]
    accuracy = (correct / total * 100) if total > 0 else 0

    message = (
        f"üìä TH·ªêNG K√ä D·ª∞ ƒêO√ÅN BOT üìä\n"
        f"T·ªïng s·ªë phi√™n ƒë√£ d·ª± ƒëo√°n: {total}\n"
        f"S·ªë phi√™n d·ª± ƒëo√°n ƒë√∫ng: {correct}\n"
        f"T·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng: {accuracy:.2f}%\n\n"
        f"L∆∞u √Ω: Th·ªëng k√™ n√†y ƒë∆∞·ª£c reset khi bot kh·ªüi ƒë·ªông l·∫°i (tr·ª´ khi c√≥ database)."
    )
    await update.message.reply_text(message)

async def reset_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global prediction_stats
    prediction_stats = {
        "total_predictions": 0,
        "correct_predictions": 0,
        "last_checked_phien": None
    }
    await update.message.reply_text("Th·ªëng k√™ d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.")
    logger.info(f"Prediction stats reset by admin {update.effective_user.id}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ªánh n√†y. Vui l√≤ng d√πng /help ƒë·ªÉ xem c√°c l·ªánh h·ªó tr·ª£.")

def main() -> None:
    load_keys() # Load keys when bot starts
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ƒêƒÉng k√Ω c√°c tr√¨nh x·ª≠ l√Ω l·ªánh
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("key", key_command))
    application.add_handler(CommandHandler("chaymodelbasic", chaymodelbasic_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("admin", handle_admin_commands)) # L·ªánh admin ch√≠nh
    application.add_handler(CommandHandler("check", check_command))

    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    logger.info("Bot started polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

