import logging
import requests
import asyncio
import os
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ApplicationBuilder,
    CallbackContext,
)
from flask import Flask, request
import json
import time
import datetime
import uuid

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh bot
TOKEN = "8137068939:AAG19xO92yXsz_d9vz_m2aJW2Wh8JZnvSPQ"
ADMIN_ID = 6915752059  # ID Telegram c·ªßa admin
API_URL = "https://apiluck2.onrender.com/predict"

# L·∫•y URL c·ªßa d·ªãch v·ª• Render t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render t·ª± ƒë·ªông cung c·∫•p)
WEBHOOK_URL_BASE = os.environ.get("RENDER_EXTERNAL_HOSTNAME") 
if WEBHOOK_URL_BASE:
    WEBHOOK_URL = f"https://{WEBHOOK_URL_BASE}/{TOKEN}"
else:
    WEBHOOK_URL = None # C·∫ßn ƒë∆∞·ª£c c·∫•u h√¨nh n·∫øu kh√¥ng ph·∫£i Render

# Dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i ch·∫°y d·ª± ƒëo√°n c·ªßa t·ª´ng ng∆∞·ªùi d√πng
user_prediction_status = {}
# Dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin key v√† h·∫°n s·ª≠ d·ª•ng
active_keys = {} # key: { 'expiry_date': datetime.datetime, 'used_by': user_id }
user_active_packages = {} # user_id: key

# Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ t·ªïng s·ªë l·∫ßn d·ª± ƒëo√°n v√† s·ªë l·∫ßn d·ª± ƒëo√°n ƒë√∫ng
prediction_stats = {
    "total_predictions": 0,
    "correct_predictions": 0,
    "last_actual_result": None,
    "last_predicted_result": None
}

# Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ phi√™n cu·ªëi c√πng m√† bot ƒë√£ x·ª≠ l√Ω t·ª´ API
last_api_phien_moi_processed = None

# Flask app cho webhook
app = Flask(__name__)
application_instance = None # S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o trong main v√† g√°n v√†o ƒë√¢y

# ƒê·ªãnh nghƒ©a c√°c h√†m x·ª≠ l√Ω l·ªánh (gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    
    package_info = "Ch∆∞a k√≠ch ho·∫°t"
    expiry_info = "Ch∆∞a k√≠ch ho·∫°t"

    if user_id in user_active_packages:
        key = user_active_packages[user_id]
        if key in active_keys:
            key_data = active_keys[key]
            if key_data['expiry_date'] is None:
                expiry_info = "Vƒ©nh vi·ªÖn"
                package_info = "ƒê√£ k√≠ch ho·∫°t"
            elif key_data['expiry_date'] > datetime.datetime.now():
                expiry_info = key_data['expiry_date'].strftime("%H:%M %d-%m-%Y")
                package_info = "ƒê√£ k√≠ch ho·∫°t"
            else:
                del user_active_packages[user_id]
                del active_keys[key]
        
    await update.message.reply_html(
        f"üåü CH√ÄO M·ª™NG **{user.first_name}** üåü\n"
        "üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi HeHe Bot üéâ\n"
        f"üì¶ G√≥i hi·ªán t·∫°i: {package_info}\n"
        f"‚è∞ H·∫øt h·∫°n: {expiry_info}\n"
        "üí° D√πng /help ƒë·ªÉ xem c√°c l·ªánh\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    package_info = "Ch∆∞a k√≠ch ho·∫°t"
    
    if user_id in user_active_packages:
        key = user_active_packages[user_id]
        if key in active_keys:
            key_data = active_keys[key]
            if key_data['expiry_date'] is None or key_data['expiry_date'] > datetime.datetime.now():
                package_info = "ƒê√£ k√≠ch ho·∫°t"
            else:
                del user_active_packages[user_id]
                del active_keys[key]

    await update.message.reply_text(
        f"üì¶ G√≥i hi·ªán t·∫°i: {package_info}\n"
        "üî• C√°c l·ªánh h·ªó tr·ª£:\n"
        "‚úÖ /start - ƒêƒÉng k√Ω v√† b·∫Øt ƒë·∫ßu\n"
        "üîë /key [m√£] - K√≠ch ho·∫°t g√≥i\n"
        "üéÆ /chaymodelbasic - Ch·∫°y d·ª± ƒëo√°n  (LUCK)\n"
        "üõë /stop - D·ª´ng d·ª± ƒëo√°n\n"
        "üõ†Ô∏è /admin - L·ªánh d√†nh cho admin\n"
        "üì¨ Li√™n h·ªá:\n"
        f"üë§ Admin: t.me/heheviptool\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
    )

async def activate_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p m√£ k√≠ch ho·∫°t. V√≠ d·ª•: /key ABCXYZ")
        return
    
    input_key = context.args[0]
    
    if input_key in active_keys:
        key_data = active_keys[input_key]
        if key_data['used_by'] is not None and key_data['used_by'] != user_id:
            await update.message.reply_text("M√£ n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c.")
            return

        if key_data['expiry_date'] is None:
            user_active_packages[user_id] = input_key
            active_keys[input_key]['used_by'] = user_id
            await update.message.reply_text("üéâ G√≥i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t vƒ©nh vi·ªÖn!")
        elif key_data['expiry_date'] > datetime.datetime.now():
            user_active_packages[user_id] = input_key
            active_keys[input_key]['used_by'] = user_id
            expiry_str = key_data['expiry_date'].strftime("%H:%M %d-%m-%Y")
            await update.message.reply_text(f"üéâ G√≥i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! H·∫øt h·∫°n v√†o: {expiry_str}")
        else:
            await update.message.reply_text("M√£ n√†y ƒë√£ h·∫øt h·∫°n. Vui l√≤ng li√™n h·ªá Admin.")
            del active_keys[input_key]
            if user_id in user_active_packages and user_active_packages[user_id] == input_key:
                del user_active_packages[user_id]
    else:
        await update.message.reply_text("M√£ k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá Admin.")

async def send_prediction_message(chat_id: int, prediction_data: dict, bot_obj) -> None:
    try:
        phien_moi = prediction_data.get("Phien_moi", "N/A")
        matches = prediction_data.get("matches", [])
        
        ket_qua = "T√ÄI" if "t" in matches else "X·ªàU" if "x" in matches else "N/A"
        
        pattern = prediction_data.get("pattern", "N/A")
        phien_du_doan = prediction_data.get("phien_du_doan", "N/A")
        du_doan_ket_qua = prediction_data.get("du_doan", "N/A")

        message_text = (
            f"ü§ñ  ü·¥ú·¥Ñ·¥ã è·¥°…™…¥ \n"
            f"üéØ ·¥ò ú…™·¥áÃÇ…¥ {phien_moi} \n"
            f"üé≤ ·¥ã·¥áÃÇÃÅ·¥õ «´·¥úÃâ·¥Ä : {ket_qua} \n"
            f"üß© ·¥ò·¥Ä·¥õ·¥õ·¥á Ä…¥ : {pattern} \n"
            f"üéÆ  ·¥ò ú…™·¥áÃÇ…¥ {phien_du_doan} : {du_doan_ket_qua} (·¥ç·¥è·¥Ö·¥á ü  ô·¥ÄÍú±…™·¥Ñ)\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-"
        )
        
        if ket_qua != "N/A" and du_doan_ket_qua != "N/A":
            prediction_stats["total_predictions"] += 1
            if (ket_qua == "T√ÄI" and du_doan_ket_qua == "T√†i") or \
               (ket_qua == "X·ªàU" and du_doan_ket_qua == "X·ªâu"):
                prediction_stats["correct_predictions"] += 1
            prediction_stats["last_actual_result"] = ket_qua
            prediction_stats["last_predicted_result"] = du_doan_ket_qua
        
        await bot_obj.send_message(chat_id=chat_id, text=message_text)

    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn d·ª± ƒëo√°n cho chat_id {chat_id}: {e}")

async def fetch_and_send_prediction_task(context: CallbackContext) -> None:
    global last_api_phien_moi_processed
    
    try:
        response = requests.get(API_URL)
        response.raise_for_status()
        data = response.json()
        current_phien_moi = data.get("Phien_moi")

        if current_phien_moi and current_phien_moi != last_api_phien_moi_processed:
            logger.info(f"Ph√°t hi·ªán phi√™n m·ªõi: {current_phien_moi}. ƒêang g·ª≠i d·ª± ƒëo√°n...")
            
            users_to_predict_in_this_cycle = []
            for user_id, status in list(user_prediction_status.items()):
                if status:
                    if user_id in user_active_packages:
                        key = user_active_packages[user_id]
                        if key in active_keys:
                            key_data = active_keys[key]
                            if key_data['expiry_date'] is None or key_data['expiry_date'] > datetime.datetime.now():
                                users_to_predict_in_this_cycle.append(user_id)
                            else:
                                user_prediction_status[user_id] = False
                                await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è G√≥i c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng k√≠ch ho·∫°t l·∫°i ƒë·ªÉ ti·∫øp t·ª•c nh·∫≠n d·ª± ƒëo√°n.")
                                del user_active_packages[user_id]
                                del active_keys[key]
                        else:
                            user_prediction_status[user_id] = False
                            await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è G√≥i c·ªßa b·∫°n kh√¥ng c√≤n hi·ªáu l·ª±c. Vui l√≤ng li√™n h·ªá Admin.")
                            del user_active_packages[user_id]
                    else:
                        user_prediction_status[user_id] = False
                        await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è Vui l√≤ng k√≠ch ho·∫°t g√≥i ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng d·ª± ƒëo√°n. D√πng /key [m√£].")
            
            for chat_id in users_to_predict_in_this_cycle:
                await send_prediction_message(chat_id, data, context.bot)
                await asyncio.sleep(0.1)
            
            last_api_phien_moi_processed = current_phien_moi
        else:
            logger.info(f"Phi√™n API hi·ªán t·∫°i ({current_phien_moi}) ch∆∞a thay ƒë·ªïi.")
            
    except requests.exceptions.RequestException as e:
        logger.error(f"L·ªói khi g·ªçi API: {e}")
    except json.JSONDecodeError as e:
        logger.error(f"L·ªói ph√¢n t√≠ch JSON t·ª´ API: {e}")
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong fetch_and_send_prediction_task: {e}")

async def chay_model_basic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    
    if user_id not in user_active_packages:
        await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng k√≠ch ho·∫°t g√≥i ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng d·ª± ƒëo√°n. D√πng /key [m√£].")
        return
    
    key = user_active_packages[user_id]
    if key not in active_keys or (active_keys[key]['expiry_date'] is not None and active_keys[key]['expiry_date'] <= datetime.datetime.now()):
        await update.message.reply_text("‚ö†Ô∏è G√≥i c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c. Vui l√≤ng k√≠ch ho·∫°t l·∫°i.")
        del user_active_packages[user_id]
        if key in active_keys: del active_keys[key]
        return

    if user_prediction_status.get(user_id):
        await update.message.reply_text("D·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c b·∫≠t r·ªìi.")
        return
    
    user_prediction_status[user_id] = True
    await update.message.reply_text("‚ö°Ô∏è ƒêang ch·∫°y d·ª± ƒëo√°n (LUCK) t·ª´ Model Basic... Vui l√≤ng ƒë·ª£i k·∫øt qu·∫£.")
    
async def stop_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not user_prediction_status.get(user_id):
        await update.message.reply_text("D·ª± ƒëo√°n ch∆∞a ƒë∆∞·ª£c b·∫≠t.")
        return

    user_prediction_status[user_id] = False
    await update.message.reply_text("üõë ƒê√£ d·ª´ng d·ª± ƒëo√°n.")

async def admin_command(update: Update.Update, context: ContextTypes.DEFAULT_TYPE) -> None: # S·ª≠a Update.Update th√†nh Update
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    await update.message.reply_text(
        "üõ†Ô∏è L·ªánh d√†nh cho Admin:\n"
        "üîë /taokey [gi·ªù/ng√†y/tu·∫ßn/th√°ng/nƒÉm/vƒ©nhvi·ªÖn] [s·ªë l∆∞·ª£ng (n·∫øu l√† gi·ªù/ng√†y/tu·∫ßn/th√°ng/nƒÉm)] - T·∫°o key k√≠ch ho·∫°t.\n"
        "üìä /check - Ki·ªÉm tra s·ªë l·∫ßn d·ª± ƒëo√°n ƒë√∫ng c·ªßa bot.\n"
        "üì¢ /tbao [tin nh·∫Øn] - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c v·ªõi bot.\n"
    )

async def tao_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p ƒë·ªãnh d·∫°ng v√† s·ªë l∆∞·ª£ng (n·∫øu c√≥). V√≠ d·ª•: /taokey ng√†y 7 ho·∫∑c /taokey vƒ©nhvi·ªÖn")
        return
    
    duration_type = context.args[0].lower()
    amount = None
    
    if duration_type not in ["gi·ªù", "ng√†y", "tu·∫ßn", "th√°ng", "nƒÉm", "vƒ©nhvi·ªÖn"]:
        await update.message.reply_text("ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn: gi·ªù, ng√†y, tu·∫ßn, th√°ng, nƒÉm, vƒ©nhvi·ªÖn.")
        return

    if duration_type != "vƒ©nhvi·ªÖn":
        if len(context.args) < 2:
            await update.message.reply_text(f"Vui l√≤ng cung c·∫•p s·ªë l∆∞·ª£ng {duration_type}. V√≠ d·ª•: /taokey {duration_type} 7")
            return
        try:
            amount = int(context.args[1])
            if amount <= 0:
                await update.message.reply_text("S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.")
                return
        except ValueError:
            await update.message.reply_text("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë nguy√™n.")
            return

    new_key = str(uuid.uuid4()).replace('-', '')[:10].upper()
    expiry_date = None

    if duration_type == "gi·ªù":
        expiry_date = datetime.datetime.now() + datetime.timedelta(hours=amount)
    elif duration_type == "ng√†y":
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=amount)
    elif duration_type == "tu·∫ßn":
        expiry_date = datetime.datetime.now() + datetime.timedelta(weeks=amount)
    elif duration_type == "th√°ng":
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=amount * 30)
    elif duration_type == "nƒÉm":
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=amount * 365)

    active_keys[new_key] = {
        'expiry_date': expiry_date,
        'used_by': None
    }
    
    expiry_str = "Vƒ©nh vi·ªÖn" if expiry_date is None else expiry_date.strftime("%H:%M %d-%m-%Y")
    await update.message.reply_text(f"ƒê√£ t·∫°o key m·ªõi: `{new_key}` (H·∫øt h·∫°n: {expiry_str})", parse_mode='Markdown')

async def check_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    total = prediction_stats["total_predictions"]
    correct = prediction_stats["correct_predictions"]
    accuracy = (correct / total * 100) if total > 0 else 0

    last_actual = prediction_stats["last_actual_result"] if prediction_stats["last_actual_result"] else "N/A"
    last_predicted = prediction_stats["last_predicted_result"] if prediction_stats["last_predicted_result"] else "N/A"

    await update.message.reply_text(
        f"üìä Th·ªëng k√™ d·ª± ƒëo√°n c·ªßa Bot:\n"
        f"T·ªïng s·ªë d·ª± ƒëo√°n: {total}\n"
        f"S·ªë l·∫ßn d·ª± ƒëo√°n ƒë√∫ng: {correct}\n"
        f"T·ª∑ l·ªá ch√≠nh x√°c: {accuracy:.2f}%\n"
        f"K·∫øt qu·∫£ th·ª±c t·∫ø g·∫ßn nh·∫•t: {last_actual}\n"
        f"D·ª± ƒëo√°n g·∫ßn nh·∫•t: {last_predicted}"
    )

async def send_to_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not context.args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p tin nh·∫Øn ƒë·ªÉ g·ª≠i. V√≠ d·ª•: /tbao Th√¥ng b√°o quan tr·ªçng!")
        return

    message_to_send = " ".join(context.args)
    sent_count = 0
    failed_count = 0

    all_chat_ids = set(user_prediction_status.keys())
    for user_id in user_active_packages:
        all_chat_ids.add(user_id)
    all_chat_ids.add(ADMIN_ID)

    await update.message.reply_text("ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng. Vui l√≤ng ƒë·ª£i...")

    for chat_id in all_chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"üì¢ **TH√îNG B√ÅO T·ª™ ADMIN** üì¢\n\n{message_to_send}", parse_mode='Markdown')
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn chat_id {chat_id}: {e}")
            failed_count += 1
    
    await update.message.reply_text(f"ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {sent_count} ng∆∞·ªùi d√πng. Th·∫•t b·∫°i: {failed_count}.")

# Webhook handler
@app.route(f"/{TOKEN}", methods=["POST"])
async def telegram_webhook():
    if application_instance is None:
        logger.error("Application instance is None. Webhook cannot be processed.")
        return "Internal server error", 500
    
    update_data = request.get_json(force=True)
    update = Update.de_json(update_data, application_instance.bot)
    
    # Process update asynchronously
    # Use application_instance.update_queue.put(update) or application_instance.process_update(update)
    # The latter is simpler for direct webhook processing.
    await application_instance.process_update(update)
    return "ok"

# Route cho Render ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
@app.route('/')
def index():
    return "Bot is running and listening for webhooks!"

# H√†m ch·∫°y bot Telegram (ch·ªâ bao g·ªìm vi·ªác kh·ªüi t·∫°o v√† l√™n l·ªãch job)
async def run_telegram_bot_tasks(app_instance: Application):
    logger.info("Initializing Telegram bot tasks...")
    # ƒê·∫∑t webhook cho bot
    if WEBHOOK_URL:
        logger.info(f"Setting webhook to: {WEBHOOK_URL}")
        await app_instance.bot.set_webhook(url=WEBHOOK_URL)
    else:
        logger.warning("WEBHOOK_URL not set. Bot might not receive updates correctly.")
    
    # Schedule the periodic task to fetch predictions
    # interval=5 l√† 5 gi√¢y, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
    app_instance.job_queue.run_repeating(fetch_and_send_prediction_task, interval=5, first=1)
    logger.info("Telegram bot tasks scheduled.")

def main() -> None:
    global application_instance
    
    # X√¢y d·ª±ng ·ª©ng d·ª•ng bot
    application_instance = ApplicationBuilder().token(TOKEN).build()

    # ƒêƒÉng k√Ω c√°c tr√¨nh x·ª≠ l√Ω l·ªánh
    application_instance.add_handler(CommandHandler("start", start))
    application_instance.add_handler(CommandHandler("help", help_command))
    application_instance.add_handler(CommandHandler("key", activate_key))
    application_instance.add_handler(CommandHandler("chaymodelbasic", chay_model_basic))
    application_instance.add_handler(CommandHandler("stop", stop_prediction))
    application_instance.add_handler(CommandHandler("admin", admin_command))
    
    # C√°c l·ªánh admin m·ªõi
    application_instance.add_handler(CommandHandler("taokey", tao_key))
    application_instance.add_handler(CommandHandler("check", check_stats))
    application_instance.add_handler(CommandHandler("tbao", send_to_all))

    # Kh·ªüi ch·∫°y c√°c t√°c v·ª• c·ªßa Telegram bot (webhook v√† job_queue) trong m·ªôt background task
    # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o ch√∫ng ch·∫°y trong event loop c·ªßa application_instance
    # v√† kh√¥ng ch·∫∑n Flask server.
    application_instance.create_task(run_telegram_bot_tasks(application_instance))

    # Flask s·∫Ω ch·∫°y tr√™n c·ªïng ƒë∆∞·ª£c Render cung c·∫•p
    port = int(os.environ.get("PORT", 8080))
    
    # Kh·ªüi ch·∫°y Flask app
    # Gunicorn s·∫Ω g·ªçi app.run() th√¥ng qua WSGI, n√™n KH√îNG g·ªçi app.run() ·ªü ƒë√¢y
    logger.info(f"Flask app is ready to serve on port {port}")

if __name__ == "__main__":
    # ƒê√¢y l√† ƒëi·ªÉm kh·ªüi ƒë·∫ßu khi Gunicorn ch·∫°y `bot:app`
    # `app` l√† ƒë·ªëi t∆∞·ª£ng Flask, v√† `main()` s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ c·∫•u h√¨nh `application_instance`
    main()

